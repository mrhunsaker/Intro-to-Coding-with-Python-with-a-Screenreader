# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart1
title: Final
content: >+
  # Final Exam: GUI Project Proofreading and Documentation (Extended Version)


  ## Instructions:


  You are provided with an extended Python GUI project using the tkinter
  library. Your task is to proofread and correct all errors in the code.
  Additionally, you must add informative docstrings to all functions and
  classes, and inline comments to explain key parts of the code.

  Your corrected code should:

  1\. Run without errors.

  2\. Function as intended (i.e., display a window with a button and a label,
  update the label when the button is clicked, manage an entry field, and handle
  a second, simpler window).

  3\. Be well-documented with clear docstrings and inline comments.

  4\. Adhere to good Python practices, especially regarding indentation (fix any
  that look like copy-paste mishaps).


  Common Error Types to Look For:

  • Syntax Errors: Missing colons, parentheses, brackets, incorrect keywords.

  • Indentation Errors: Lines improperly indented (treat these as simple
  copy-paste mishaps).

  • Name Errors: Variables or functions not defined, or misspelled.

  • Attribute Errors: Trying to access a non-existent method or attribute.

  • Type Errors: Operations on incompatible data types.

  • Logical Errors: Code runs but doesn't do what's expected (e.g., wrong
  comparison, infinite loop, incorrect variable update).


  ```python

  import tkinter as tk

  from tkinter import messagebox


  # Class for the secondary window

  class SecondaryWindow:
      def __init__(self, parent_window):
          self.child_window = tk.Toplevel(parent_window)
          self.child_window.title("Secondary Window")
          self.child_window.geometry("200x100")
          self.child_window.transient(parent_window) # Set parent for proper closing

          self.close_button = tk.Button(self.child_window, text="Close Me", command=self.close_window)
          self.close_button.pack(pady=10)

      def close_window(self):
          self.child_window.destroy()

  # Class for the main application window

  class MyGUIApp:
      def __init__(root_window): # Missing self parameter
          root_window.title("Advanced GUI App")
          root_window.geometry("400x300")

          # Counter for button clicks
          self.click_count = 0

          # Label to display messages
          self.message_label = tk.Label(root_window, text="Hello, Tkinter!", font=("Arial", 14))
          self.message_label.pack(pady=20)

          # Entry field for user input
          self.user_input_entry = tk.Entry(root_window, width=30)
          self.user_input_entry.pack(pady=10)

          # Button to trigger an action
          self.my_button = tk.Button(root_window, text="Click Me!")
          self.my_button.config(command=self.on_button_click) # Using config
          self.my_button.pack()

          # Button to display content from entry
          self.display_button = tk.Button(root_window, text="Display Input")
          self.display_button.config(command=self.display_entry_content)
          self.display_button.pack(pady=5)

          # Button to open a new window
          self.new_window_button = tk.Button(root_window, text="Open New Window")
          self.new_window_button.config(command=self.open_secondary_window()) # Calling method instead of referencing
          self.new_window_button.pack(pady=5)

          # Another label for status
          self.status_label = tk.Label(root_window, text="Status: Ready", fg="blue")
          self.status_label.pack(pady=15)

      def on_button_click(): # Missing self parameter
          self.click_count += 1
          current_text = self.message_label["text"] # Accessing text attribute with brackets
          new_text = "Button clicked " + self.click_count + " times!" # TypeError: string + int
          self.message_label.config(text=new_text)
          self.status_label.config(text="Status: Clicked!")
          messagebox.showinfo("Action Info", "Main button was pressed.")

      def display_entry_content(self):
          entered_text = self.user_input_entry.get()
          if entered_text = "": # Assignment instead of comparison
              self.status_label.config(text="Status: Input is Empty!", fg="red")
          else:
              self.status_label.config(text=f"Status: Displaying '{entered_text}'", fg="green")
              print(f"User entered: {entered_text}") # Debug print

          def open_secondary_window(self): # Incorrect indentation, also a method of MyGUIApp
              new_win = SecondaryWindow(self.root) # NameError: 'root' not an attribute of self
              new_win.child_window.lift() # Bring new window to front

  # Main part of the script

  if __name__ = '__main__': # SyntaxError: assignment instead of comparison
      main_root = tk.Tk()
      app_instance = MyGUIApp(main_root)
      main_root.mainloop()
  ```

