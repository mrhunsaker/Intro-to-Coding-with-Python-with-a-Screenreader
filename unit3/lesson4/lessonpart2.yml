# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart2
title: Lesson
content: >+
  # Lesson: Computing with Numbers


  ## Integers, floats, and their differences. Type conversions (`int()`,
  `float()`, `str()`).


  This lesson reinforces the distinction between integers (whole numbers) and
  floats (numbers with decimal points). Explicit type conversion is necessary
  when performing mathematical operations on user input, as `input()` always
  returns a string.


  ## Explicit Examples


  ## Example 2.4.1: Type Conversion in Action


  ```python

  # Demonstrating type conversions

  num_str = "123"

  num_int = int(num_str)

  print(f"String '{num_str}' converted to integer: {num_int}, type:
  {type(num_int)}")


  num_float = float(num_str)

  print(f"String '{num_str}' converted to float: {num_float}, type:
  {type(num_float)}")


  my_number = 42

  my_text = str(my_number)

  print(f"Integer {my_number} converted to string: '{my_text}', type:
  {type(my_text)}")

  ```


  Expected Output:


  ```

  String '123' converted to integer: 123, type: <class 'int'>

  String '123' converted to float: 123.0, type: <class 'float'>

  Integer 42 converted to string: '42', type: <class 'str'>

  ```


  ## Example 2.4.2: Common Type Error


  ```python

  # This code will cause an error!

  # print("My age is " + 14) # Cannot combine string and integer directly with +

  ```


  Expected Output (Error):


  ```

  TypeError: can only concatenate str (not "int") to str

  ```


  ## Activities


  1. **Activity 2.4.1: Mixed Bag Calculator**

     1. Create `mixed_calc.py`.
     2. Prompt for age.
     3. Prompt for weight (decimal).
     4. Prompt for a short phrase.
     5. Attempt these operations (comment out lines that error and explain why):

        * Add age and weight.

        * Multiply age by 2.

        * Combine phrase with string version of age.

        * Attempt to add phrase and age directly (should error).
     6. Print results of successful operations, clearly labeled.

     * Purpose: Practice type conversion and compatibility issues.

     * Accessibility: Emphasize reading and interpreting error messages.

