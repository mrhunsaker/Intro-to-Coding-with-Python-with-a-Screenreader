# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart2
title: Lesson
content: >+
  # Lesson: The Software Development Process


  ## Problem solving, design, implementation, testing.


  The software development process is a structured approach to creating
  programs. It begins with Problem Solving, which involves clearly understanding
  the problem that needs to be addressed. This includes defining the goal,
  identifying the available information, and determining the required output.
  Next is Design, where the plan for solving the problem is formulated. This
  often involves outlining the steps the program will take, identifying
  necessary variables, and considering how the program will interact with the
  user, often expressed through pseudocode or simple step-by-step lists.
  Implementation is the stage where the actual Python code is written based on
  the developed design. Finally, Testing involves verifying that the program
  functions correctly, produces accurate results, and handles various inputs as
  expected.

  For example, consider the problem of calculating the area of a rectangle. The
  Problem Solving phase would identify the need for length and width as input
  and the desired output as the calculated area. The Design phase might outline
  steps such as "GET length and width from user," "MULTIPLY length by width,"
  and "PRINT the result." The Implementation would involve writing the Python
  code for this calculation. During Testing, one would test with known values,
  such as length 5 and width 2 (expecting an area of 10), and length 0 and width
  10 (expecting an area of 0), to ensure accuracy.


  ## Activities


  1. **Activity 2.1.1: Planning a Tip Calculator**

     * Instructions: Imagine the task of writing a program that calculates a 15% tip on a restaurant bill.

       1. Problem Solving: Determine what information is needed from the user and what the desired output should be.
       2. Design (Pseudocode): Write down the steps the program would follow in plain English or "pseudocode." For example:

          * GET bill amount from user

          * CALCULATE tip as 15% of bill amount

          * CALCULATE total amount (bill + tip)

          * PRINT tip amount

          * PRINT total amount
       3. Discuss the plan with a partner or instructor.

     * Purpose: Practice breaking down a problem into logical, manageable steps before coding.

     * Accessibility: Verbal discussion or typing plain text/pseudocode.

  2. **Activity 2.1.2: Tracing a Simple Program**

     * Instructions: Given the following program:

       ```python
       a = 10
       b = 5
       c = a * b
       a = a + 2
       print(c)
       print(a)
       ```

       1. Without executing the code, trace its execution step by step. Keep a record of the value of each variable after each line of code.
       2. Predict what the program will print as its final output.
       3. Execute the program by typing `python3 trace_program.py` and compare the actual output to the prediction.

     * Purpose: Develop a mental model of program execution and variable states.

     * Accessibility: Use a text editor to document variable states and predictions. Compare with actual terminal output.

showEditor: true
editors:
  - course1/unit2/lesson4/lessonpart2/lesson2_1.py
