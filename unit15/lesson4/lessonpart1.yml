id: lessonpart1
title: |-
  Resources
content: "## Reading\
\
- # Resources for Additional Learning (Middle & High School)

## General Computer Science & Programming Concepts

1. CS Unplugged:

   * Description: Teaches computer science concepts through engaging, hands-on activities without a computer. Excellent for understanding algorithms, data representation, and more at a conceptual level. Many activities can be adapted for non-visual learning.

   * Accessibility: Relies on physical activities and verbal explanations. Instructors can guide students through these.

   * Link: <https://csunplugged.org/en/>
2. Khan Academy - Computer Programming:

   * Description: Offers structured courses on computer programming (often JavaScript-based, but the concepts transfer). Their explanations are clear and have a strong focus on \"talk-throughs\" which can be good for screen readers.

   * Accessibility: Videos have transcripts. Exercises are interactive and may require careful screen reader navigation but are generally\
  \ text-based.

   * Link: <https://www.khanacademy.org/computing/computer-programming> (Explore sections like \"Programming Basics\" and \"Algorithms\")
3. Code.org:

   * Description: Primarily known for \"Hour of Code\" and introductory CS courses. While many of their activities are visual (block-based), their underlying conceptual explanations are often solid. The \"unplugged\" activities or discussions around programming concepts can be valuable.

   * Accessibility: Some sections may be challenging for screen readers due to drag-and-drop interfaces, but conceptual explanations are good.

   * Link: <https://code.org/>
4. Google's CS First:

   * Description: Aimed at younger students, but has good introductory concepts. Similar to Code.org, some activities are visual, but conceptual discussions are useful.

   * Accessibility: May have visual challenges, but can be a good source for instructor-led discussions.

   * Link: <https://csfirst.withgoogle.com/>

## Python-Specific\
  \ Resources

1. Python Crash Course (3rd Edition) by Eric Matthes:

   * Description: The primary textbook reference. It's written in a clear, straightforward style with plenty of text-based exercises.

   * Accessibility: Excellent for screen readers as it's a traditional text book. The code examples are explicitly written out.

   * Availability: Purchase physical book, or instructor may have digital copy if legally acquired. The GitHub repo pcc_3e is a direct resource for the exercises.

   * GitHub Link: <https://github.com/ehmatthes/pcc_3e>
2. Automate the Boring Stuff with Python by Al Sweigart:

   * Description: Another highly recommended book for beginners, focusing on practical applications of Python. It's freely available online.

   * Accessibility: Excellent for screen readers as it's web-based text.

   * Link: <https://automatetheboringstuff.com/> (Free online version)
3. Real Python:

   * Description: A fantastic resource with high-quality tutorials\
  \ on almost any Python topic. Many articles are text-based and easy to navigate with a screen reader. They often provide clear code examples and explanations.

   * Accessibility: Primarily text articles, well-formatted.

   * Link: <https://realpython.com/> (Search for specific topics like \"Python if else\", \"Python for loops\", \"Python dictionaries\", etc.)
4. W3Schools Python Tutorial:

   * Description: A quick reference for Python syntax and concepts. Simple explanations and runnable examples (though the interactive editor might be tricky with a screen reader, the code itself is clear).

   * Accessibility: Text-based, easy to navigate.

   * Link: <https://www.w3schools.com/python/>
5. The Official Python Tutorial:

   * Description: Part of the official Python documentation. Can be dense, but it's the definitive source for Python language features. Good for deeper understanding once basics are grasped.

   * Accessibility: Highly accessible text documentation.
\
  
   * Link: <https://docs.python.org/3/tutorial/>

## Specific Topic Deep Dives (Beyond Core Curriculum)

### For/While Loops & Conditional Statements (Units 3 & 5)

* Logic Puzzles (Non-visual): Provide verbal logic puzzles or text-based riddle games that require conditional thinking or iterative processes to solve.

  * Example: \"I'm thinking of a number between 1 and 100. Is it higher or lower than 50? (Continue until guessed)\" - This simulates a binary search, illustrating if/elif/else and while loops.

  * Flowchart Concepts (Verbal/Textual): Describe flowcharts verbally (e.g., \"Start -> Is condition A true? -> If yes, do X; if no, do Y -> End\"). This helps visualize control flow without actual visual diagrams.

  * <br />

### JSON Files (Unit 8)

* JSON Explained Simply:

  * Description: Focus on textual explanations of JSON's structure: it's built on key-value pairs (like Python dictionaries) and ordered lists (like Python lists). Provide very simple JSON\
  \ examples for them to read aloud and map to Python.

  * Resource: The json.org website is the specification, but its examples are clean and good for textual parsing.

  * Example JSON for practice:

```json
{
  \"name\": \"John Doe\",
  \"age\": 30,
  \"isStudent\": false,
  \"courses\": [
    \"History\", 
    \"Math\", 
    \"Science\"
    ],
  \"address\": {
    \"street\": \"123 Main St\",
    \"city\": \"Anytown\"
  }
}
```

Then ask questions like: \"What is John's age?\", \"List his courses.\", \"What is the street name?\"

* Online JSON Validators/Formatters: While primarily visual, some online tools allow pasting JSON. Students can paste their own output and listen to the validation message (\"Valid JSON\" or specific error messages).

* Resource: Search \"online json validator\" - ensure it gives clear text feedback.

## Indentation Strategies for Screen Readers (All Units, especially 3, 5, 6, 7)

* NVDA/JAWS/VoiceOver Documentation:

* Description:\
  \ The absolute best resource for specific screen reader settings. Encourage students to look up \"indentation announcement,\" \"tab stops,\" and \"line navigation\" features for their specific screen reader.

* Action: Instructor could prepare a short guide for common screen readers on accessing these specific settings within VS Code.

* VS Code Accessibility Docs:

* Description: Microsoft has excellent documentation on VS Code's accessibility features.

* Link: [https://code.visualstudio.com/docs/editor/accessibility)](https://code.visualstudio.com/docs/editor/accessibility) (Focus on \"Screen Readers\" and \"Navigation\")

* Auditory Cues for Indentation:

* Description: Practice sessions where the instructor (or a peer) reads code aloud, explicitly verbalizing indentation changes (e.g., \"Line 1, no indent: def my_function():,\" \"Line 2, 4 spaces indent: print('Hello')\"). Students can try to replicate.

* Strategic Commenting (#start / #end):

* Description: Emphasize\
  \ that this is a personal strategy for navigating complex code blocks. It's not standard Python, but can be a lifesaver.

* Example:

```python
for i in range(5):
    # #start_loop_body
    if i % 2 == 0:
        # #start_if_block
        print(f\"{i} is even\")
        # #end_if_block
    else:
        # #start_else_block
        print(f\"{i} is odd\")
        # #end_else_block
    # #end_loop_body
```

## General Debugging & Problem Solving

* Rubber Duck Debugging:

* Description: The classic technique of explaining your code, line by line, to an inanimate object (or verbally to yourself/a peer). The act of explaining often helps reveal the error.

* Accessibility: Perfectly suited for non-visual learners as it's entirely verbal.

* Reading Tracebacks:

* Description: Teach students to systematically read Python tracebacks from bottom to top, identifying the \"most recent call last\" and the line number where the error occurred.

* Practice: Provide snippets\
  \ with common errors (syntax, runtime) and have students locate the error using only the traceback message.

* Print Debugging:

* Description: Using print() statements to inspect the values of variables at different points in the code.

* Accessibility: The primary and most accessible debugging technique for screen reader users.\
"
