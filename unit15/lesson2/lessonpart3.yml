# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart3
title: Unit 3
content: >-
  # Unit 3: Control Flow: Decisions and Loops

  ## Lesson 3.1: Boolean Expressions and if Statements
      • Proofreading Assignment:
          ◦ Scenario: You're writing a conditional statement, but indentation and comparison operators are causing issues. Listen for "indentation error" messages.
          ◦ Code to Proofread: 

  ```python

  age = 17


  if age >= 18:

  print("You are an adult.") # Incorrect indentation

  else:
      print("You are a minor.")

  score = 85

  if score = 85: # Assignment instead of comparison
      print("Score is exactly 85.")

  name = "Bob"

  if name != "Alice"
      print("Not Alice.") # SyntaxError: missing colon
  ```

         ◦ Errors to Find:
              1. IndentationError: First print is incorrectly indented.
              2. SyntaxError (or NameError depending on context): if score = 85 should be ==.
              3. SyntaxError: if name != "Alice" is missing a colon.
          ◦ Goal: Fix all errors so the program runs and the conditional logic works as intended.
      • Documentation Assignment:
          ◦ Scenario: This code checks if a number is positive.
          ◦ Code to Document:
  ```python

  number = -5

  if number > 0:
      print("The number is positive.")
  else:
      print("The number is not positive.")
  ```
          ◦ Task: Add a docstring explaining the script's purpose. Add inline comments for the if and else blocks, explaining their conditions and actions.
          ◦ Goal: Document the conditional check for a positive number.
  ## Lesson 3.2: Chained Conditionals (elif, else)
      • Proofreading Assignment:
          ◦ Scenario: You're building a grading system, but the chained conditionals are messy due to indentation or logical errors.
          ◦ Code to Proofread: 

  ```python

  grade = 75


  if grade >= 90:
      print("Grade: A")
  elif grade >= 80:

  print("Grade: B") # Incorrect indentation

  elif grade >= 70:
      print("Grade: C")
  else:
      print("Grade: F")

  temp = 25

  is_raining = True


  if temp > 20 and is_raining = True: # Assignment instead of comparison for
  is_raining
      print("Warm and rainy.")
  elif temp < 10 or not is_raining:
      print("Cold or not raining.")
  ```

         ◦ Errors to Find:
              1. IndentationError: print("Grade: B") is incorrectly indented.
              2. SyntaxError (or NameError): is_raining = True in the if condition should be ==.
          ◦ Goal: Correct all errors, including the indentation and comparison operator, to ensure correct grading and weather condition checks.
      • Documentation Assignment:
          ◦ Scenario: This code checks the time of day and prints a greeting.
          ◦ Code to Document:
  ```python

  hour = 14 # 2 PM

  if hour < 12:
      print("Good morning!")
  elif hour < 18:
      print("Good afternoon!")
  else:
      print("Good evening!")
  ```
          ◦ Task: Add a docstring for the script. Add inline comments explaining the conditions for "Good morning," "Good afternoon," and "Good evening."
          ◦ Goal: Document the time-based greeting logic.
  ## Lesson 3.3: Introduction to Lists
      • Proofreading Assignment:
          ◦ Scenario: You're creating and accessing lists, but common mistakes with brackets and indexing are causing issues.
          ◦ Code to Proofread: 
  ```python

  fruits = ["apple", "banana", "cherry" # Missing closing bracket

  numbers = [1, 2, 3, 4]


  first_fruit = fruits[0]

  print(first_fruit)


  second_number = numbers[2] # Accessing the third element

  print(second_number)


  last_fruit = fruits[len(fruits)] # IndexError: out of bounds

  print(last_fruit)


  fruits[1] = "grape"

  print(fruits)

  ```
         ◦ Errors to Find:
              1. SyntaxError: fruits list is missing a closing bracket.
              2. IndexError: fruits[len(fruits)] attempts to access an index out of bounds.
          ◦ Goal: Fix the syntax error and the IndexError so the program runs and list operations are correct.
      • Documentation Assignment:
          ◦ Scenario: This code defines a list of colors and prints the second color.
          ◦ Code to Document:
  ```python

  colors = ["red", "green", "blue", "yellow"]

  print(colors[1])

  ```
          ◦ Task: Add a docstring explaining the list's purpose. Add an inline comment next to the print() statement explaining what colors[1] accesses.
          ◦ Goal: Document list creation and element access.
  ## Lesson 3.4: Iterating with for Loops
      • Proofreading Assignment:
          ◦ Scenario: Your for loops aren't iterating correctly due to indentation, missing colons, or incorrect range() usage.
          ◦ Code to Proofread: 
  ```python

  items = ["pen", "notebook", "eraser"]

  for item in items # Missing colon
      print(item) # Incorrect indentation

  # Loop with range

  for i in range(5) # Missing colon

  print(i) # Incorrect indentation


  # Loop with incorrect range

  for j in range(1, 1): # This loop won't run
      print(f"J is {j}")

  # Correct loop (for comparison)

  for k in range(3):
      print(f"K is {k}")
  ```
         ◦ Errors to Find:
              1. SyntaxError: Missing colons after for statements.
              2. IndentationError: Code blocks under for are incorrectly indented.
              3. Logical Error: range(1, 1) results in an empty sequence.
          ◦ Goal: Fix all errors so both loops run correctly and the indentation is proper.
      • Documentation Assignment:
          ◦ Scenario: This code prints numbers from 0 to 4 using a for loop.
          ◦ Code to Document:
  ```python

  for number in range(5):
      print(number)
  ```
          ◦ Task: Add a docstring for the script. Add an inline comment explaining what range(5) does and what the loop iterates over.
          ◦ Goal: Document a basic for loop with range().
  ## Lesson 3.5: Basic String Operations
      • Proofreading Assignment:
          ◦ Scenario: You're working with strings, but method calls, assignments, or concatenation are causing problems.
          ◦ Code to Proofread: 
  ```python

  message = "   Hello Python!   "

  clean_message = message.strip # Missing parentheses for method call

  print(clean_message)


  long_text = "This is a long sentence."

  upper_text = long_text.toupper() # Typo in method name

  print(upper_text)


  name = "Alice"

  age = 30

  greeting = "My name is " + name + " and I am " + str(age) + " years old."

  print(greeting)


  # Replacement error

  sentence = "I like apples, do you like apples?"

  new_sentence = sentence.replace("apple", "banana") # Correct

  print(new_sentence)


  bad_replace = sentence.replace("oranges", "grapes") # No error, but doesn't do
  anything

  print(bad_replace)


  len_of_msg = len[message] # TypeError: len() expects an iterable, not a list
  of one item

  print(len_of_msg)
   ```
         ◦ Errors to Find:
              1. TypeError or AttributeError: message.strip needs ().
              2. AttributeError: long_text.toupper() should be long_text.upper().
              3. TypeError: len[message] should be len(message).
          ◦ Goal: Fix all errors so string operations work as intended.
      • Documentation Assignment:
          ◦ Scenario: This code cleans and capitalizes a user's input.
          ◦ Code to Document:
  ```python

  user_input = input("Enter a phrase: ")

  cleaned_input = user_input.strip().upper()

  print(f"Cleaned and capitalized: {cleaned_input}")

  ```
          ◦ Task: Add a docstring explaining the script's purpose. Add inline comments explaining the steps of getting input, stripping whitespace, and converting to uppercase.
          ◦ Goal: Document string cleaning and transformation.
