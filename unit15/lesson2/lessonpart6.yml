# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart6
title: Unit 6
content: >+
  # Unit 6: Functions


  ## Lesson 6.1: Defining Functions


  ```

  • Proofreading Assignment:
      ◦ Scenario: You're defining functions, but misusing def, forgetting parameters, or having indentation issues.
      ◦ Code to Proofread:
  ```


  ```python

  # Function 1

  def greet name: # SyntaxError: missing parentheses for parameters
      print(f"Hello, {name}!")

  # Function 2

  def say_hello():

  print("Hello there!") # Incorrect indentation


  # Function 3

  # This function won't be callable

  my_function(): # SyntaxError: def keyword missing
      print("Inside my function.")

  greet("Alice")

  say_hello()

  my_function() # NameError: my_function not defined

  ```


  ```
      ◦ Errors to Find:
          1. SyntaxError: def greet name: needs (name):.
          2. IndentationError: print("Hello there!") is incorrectly indented.
          3. SyntaxError: my_function(): is missing def.
          4. NameError: Resulting from the previous syntax error.
      ◦ Goal: Fix all syntax and indentation errors so all functions are correctly defined and callable.
  • Documentation Assignment:
      ◦ Scenario: This code defines a simple greeting function.
      ◦ Code to Document:
  ```


  ```python

  def display_greeting(person_name):
      """
      Prints a personalized greeting.
      """
      print(f"Greetings, {person_name}!")

  display_greeting("World")

  ```


  ```
      ◦ Task: Ensure the docstring for display_greeting is clear. Add an inline comment for the print statement and the function call.
      ◦ Goal: Document a basic function definition and call.
  ```


  ## Lesson 6.2: Passing Arguments


  ```

  • Proofreading Assignment:
      ◦ Scenario: You're calling functions, but passing arguments incorrectly (positional vs. keyword, too many/few).
      ◦ Code to Proofread:
  ```


  ```python

  def describe_pet(animal_type, pet_name):
      print(f"I have a {animal_type}.")
      print(f"Its name is {pet_name}.")

  describe_pet("dog", "Buddy") # Correct positional


  describe_pet(pet_name="Lucy", "cat") # SyntaxError: positional argument
  follows keyword argument


  describe_pet("parrot") # TypeError: missing 1 required positional argument


  def make_shirt(size, message="I love Python"):
      print(f"Making a {size}-sized shirt with message: '{message}'")

  make_shirt("large", message="Hello") # Correct keyword

  make_shirt(size="medium") # Correct keyword with default


  make_shirt("small", "My custom message", "extra_arg") # TypeError: too many
  arguments

  ```


  ```
      ◦ Errors to Find:
          1. SyntaxError: describe_pet(pet_name="Lucy", "cat") has a positional argument after a keyword.
          2. TypeError: describe_pet("parrot") is missing an argument.
          3. TypeError: make_shirt(...) has too many arguments.
      ◦ Goal: Fix all TypeError and SyntaxError issues by providing the correct number and type of arguments or correcting the argument passing style.
  • Documentation Assignment:
      ◦ Scenario: This code calculates the area of a rectangle.
      ◦ Code to Document:
  ```


  ```python

  def calculate_rectangle_area(length, width):
      """
      Calculates the area of a rectangle.
      """
      area = length * width
      return area

  room_area = calculate_rectangle_area(10, 5)

  print(f"The room area is: {room_area}")

  ```


  ```
      ◦ Task: Ensure the docstring is clear and explains parameters. Add inline comments explaining the calculation and the function call.
      ◦ Goal: Document a function with parameters and its usage.
  ```


  ## Lesson 6.3: Return Values


  ```

  • Proofreading Assignment:
      ◦ Scenario: You're trying to get values back from functions, but misusing return or expecting print() to return.
      ◦ Code to Proofread:
  ```


  ```python

  def add_numbers(a, b):
      sum_val = a + b
      print(sum_val) # Prints, but doesn't return

  result1 = add_numbers(5, 3)

  print(f"Result of add_numbers: {result1}") # This will print None


  def multiply_numbers(x, y):
      return x * y

  product = multiply_numbers(4, 2)

  print(f"Product: {product}") # Correct


  def get_greeting(name):
      greeting_msg = f"Hello, {name}!"
      # Missing return statement
  final_greeting = get_greeting("Charlie")

  print(f"Final greeting: {final_greeting}") # This will print None

  ```


  ```
      ◦ Errors to Find:
          1. Logical Error: add_numbers prints but doesn't return, so result1 will be None.
          2. Logical Error: get_greeting is missing a return statement, so final_greeting will be None.
      ◦ Goal: Modify add_numbers and get_greeting to correctly return their calculated values, so the print statements show the intended output.
  • Documentation Assignment:
      ◦ Scenario: This code defines a function to capitalize a string and return it.
      ◦ Code to Document:
  ```


  ```python

  def capitalize_string(text):
      """
      Converts the given text to uppercase and returns it.
      """
      return text.upper()

  my_text = "python programming"

  capitalized = capitalize_string(my_text)

  print(f"Original: {my_text}, Capitalized: {capitalized}")

  ```


  ```
      ◦ Task: Ensure the docstring for capitalize_string clearly explains what it returns. Add inline comments for the return statement and the function call.
      ◦ Goal: Document a function with a return value.
  ```


  ## Lesson 6.4: Functions with Lists and Dictionaries


  ```

  • Proofreading Assignment:
      ◦ Scenario: You're passing lists/dictionaries to functions, but unexpected modifications or incorrect copies are happening.
      ◦ Code to Proofread:
  ```


  ```python

  def add_item_to_list(my_list_param, item):
      my_list_param.append(item)

  data_list = [1, 2, 3]

  add_item_to_list(data_list, 4) # This will modify data_list

  print(f"Original list after func call: {data_list}") # This will be [1, 2, 3,
  4]


  def process_dict(my_dict_param):
      my_dict_param["status"] = "processed"
      return my_dict_param

  config = {"version": 1.0, "active": True}

  new_config = process_dict(config)

  print(f"Original config after func call: {config}") # This will also be
  modified

  print(f"New config: {new_config}")


  def append_to_copy(original_list, value):
      new_list = original_list # This creates a reference, not a copy
      new_list.append(value)
      return new_list

  numbers = [10, 20]

  modified_numbers = append_to_copy(numbers, 30)

  print(f"Original numbers after copy func: {numbers}") # This will be [10, 20,
  30]

  ```


  ```
      ◦ Errors to Find:
          1. Logical Error: add_item_to_list directly modifies data_list (lists are mutable).
          2. Logical Error: process_dict directly modifies config (dictionaries are mutable).
          3. Logical Error: new_list = original_list creates a reference, not a copy.
      ◦ Goal: Explain the logical errors related to mutability. Modify append_to_copy to use original_list[:] to truly create a copy. Discuss how to explicitly copy lists/dictionaries if the original should remain unchanged.
  • Documentation Assignment:
      ◦ Scenario: This code defines a function that takes a list of numbers and returns a new list with each number doubled.
      ◦ Code to Document:
  ```


  ```python

  def double_numbers_in_list(numbers_list):
      """
      Doubles each number in the input list and returns a new list.
      """
      doubled_list = []
      for num in numbers_list:
          doubled_list.append(num * 2)
      return doubled_list

  my_nums = [1, 2, 3]

  doubled_result = double_numbers_in_list(my_nums)

  print(f"Original: {my_nums}, Doubled: {doubled_result}")

  ```


  ```
      ◦ Task: Ensure the docstring for double_numbers_in_list is clear about input, output, and side effects. Add inline comments explaining the loop and appending to the new list.
      ◦ Goal: Document a function that processes a list and returns a new list.
  ```


  ## Lesson 6.5: Arbitrary Number of Arguments


  ```

  • Proofreading Assignment:
      ◦ Scenario: You're using *args and **kwargs, but misplacing them or forgetting the correct number of asterisks.
      ◦ Code to Proofread:
  ```


  ```python

  def sum_all_numbers(*nums):
      total = 0
      for num in nums:
          total += num
      return total

  print(sum_all_numbers(1, 2, 3, 4)) # Correct


  def create_profile(name, **details):
      profile = {"name": name}
      for key, value in details.items():
          profile[key] = value
      return profile

  # Error: positional argument after keyword argument when using **kwargs
  implicitly

  user_profile = create_profile("Bob", age=30, "city": "London") # SyntaxError


  # Error: forgetting the double asterisk for kwargs

  def log_info(level, msg, args): # args will be treated as a single positional
  argument
      print(f"[{level}] {msg} - {args}")

  log_info("INFO", "User login", user="admin", id=123) # TypeError: log_info()
  got unexpected keyword argument 'user'

  ```


  ```
      ◦ Errors to Find:
          1. SyntaxError: create_profile call has a positional argument after a keyword argument within the **details part.
          2. TypeError: log_info function definition is missing ** for kwargs.
      ◦ Goal: Fix the SyntaxError by correcting the argument passing for create_profile. Fix the TypeError by adding ** to args in log_info's definition.
  • Documentation Assignment:
      ◦ Scenario: This code defines a function that can accept any number of ingredients and print them.
      ◦ Code to Document:
  ```


  ```python

  def make_salad(*ingredients):
      """
      Creates a salad from an arbitrary number of ingredients.
      """
      print("Ingredients for your salad:")
      for ingredient in ingredients:
          print(f"- {ingredient}")

  make_salad("lettuce", "tomato", "cucumber", "dressing")

  make_salad("spinach", "feta")

  ```


  ```
      ◦ Task: Ensure the docstring for make_salad clearly explains the use of *ingredients. Add an inline comment explaining how *ingredients collects arguments.
      ◦ Goal: Document a function that uses *args.
  ```

