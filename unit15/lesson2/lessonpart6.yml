# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart6
title: Unit 6
content: >+
  <br />


  ### **Unit 6: Functions**


  #### **Lesson 6.1: Defining Functions**


  * **Proofreading Assignment:**


  - **Scenario:** You're defining functions, but misusing def, forgetting
  parameters, or having indentation issues.


  - **Code to Proofread:**

    ```
    # Function 1
    def greet name: 
        print(f"Hello, {name}!")

    # Function 2
    def say_hello():
    print("Hello there!") 

    # Function 3
    # This function won't be callable
    my_function():
        print("Inside my function.")

    greet("Alice")
    say_hello()
    my_function()
    ```

  - **Goal:** Fix all syntax and indentation errors so all functions are
  correctly defined and callable.


  - **Documentation Assignment:**


  * **Scenario:** This code defines a simple greeting function.


  * **Code to Document:**

    ```
    def display_greeting(person_name):
        """
        Prints a personalized greeting.
        """
        print(f"Greetings, {person_name}!")

    display_greeting("World")
    ```

  * **Task:** Ensure the **docstring** for display\_greeting is clear. Add an
  **inline comment** for the print statement and the function call.


  * **Goal:** Document a basic function definition and call.


  #### **Lesson 6.2: Passing Arguments**


  * **Proofreading Assignment:**


  - **Scenario:** You're calling functions, but passing arguments incorrectly
  (positional vs. keyword, too many/few).


  - **Code to Proofread:**

    ```
    def describe_pet(animal_type, pet_name):
        print(f"I have a {animal_type}.")
        print(f"Its name is {pet_name}.")

    describe_pet("dog", "Buddy") 

    describe_pet(pet_name="Lucy", "cat")

    describe_pet("parrot") 

    def make_shirt(size, message="I love Python"):
        print(f"Making a {size}-sized shirt with message: '{message}'")

    make_shirt("large", message="Hello")
    make_shirt(size="medium")

    make_shirt("small", "My custom message", "extra_arg")
    ```

  - **Goal:** Fix all TypeError and SyntaxError issues by providing the correct
  number and type of arguments or correcting the argument passing style.


  - **Documentation Assignment:**


  * **Scenario:** This code calculates the area of a rectangle.


  * **Code to Document:**

    ```
    def calculate_rectangle_area(length, width):
        """
        Calculates the area of a rectangle.
        """
        area = length * width
        return area

    room_area = calculate_rectangle_area(10, 5)
    print(f"The room area is: {room_area}")
    ```

  * **Task:** Ensure the **docstring** is clear and explains parameters. Add
  **inline comments** explaining the calculation and the function call.


  * **Goal:** Document a function with parameters and its usage.


  #### **Lesson 6.3: Return Values**


  * **Proofreading Assignment:**


  - **Scenario:** You're trying to get values back from functions, but misusing
  return or expecting print() to return.


  - **Code to Proofread:**

    ```
    def add_numbers(a, b):
        sum_val = a + b
        print(sum_val)

    result1 = add_numbers(5, 3)
    print(f"Result of add_numbers: {result1}")

    def multiply_numbers(x, y):
        return x * y

    product = multiply_numbers(4, 2)
    print(f"Product: {product}") 

    def get_greeting(name):
        greeting_msg = f"Hello, {name}!"
    final_greeting = get_greeting("Charlie")
    print(f"Final greeting: {final_greeting}") 
    ```

  - **Goal:** Modify add\_numbers and get\_greeting to correctly return their
  calculated values, so the print statements show the intended output.


  - **Documentation Assignment:**


  * **Scenario:** This code defines a function to capitalize a string and return
  it.


  * **Code to Document:**

    ```
    def capitalize_string(text):
        """
        Converts the given text to uppercase and returns it.
        """
        return text.upper()

    my_text = "python programming"
    capitalized = capitalize_string(my_text)
    print(f"Original: {my_text}, Capitalized: {capitalized}")
    ```

  * **Task:** Ensure the **docstring** for capitalize\_string clearly explains
  what it returns. Add **inline comments** for the return statement and the
  function call.


  * **Goal:** Document a function with a return value.


  #### **Lesson 6.4: Functions with Lists and Dictionaries**


  * **Proofreading Assignment:**


  - **Scenario:** You're passing lists/dictionaries to functions, but unexpected
  modifications or incorrect copies are happening.


  - **Code to Proofread:**

    ```
    def add_item_to_list(my_list_param, item):
        my_list_param.append(item)

    data_list = [1, 2, 3]
    add_item_to_list(data_list, 4) 
    print(f"Original list after func call: {data_list}")

    def process_dict(my_dict_param):
        my_dict_param["status"] = "processed"
        return my_dict_param

    config = {"version": 1.0, "active": True}
    new_config = process_dict(config)
    print(f"Original config after func call: {config}") 
    print(f"New config: {new_config}")

    def append_to_copy(original_list, value):
        new_list = original_list 
        new_list.append(value)
        return new_list

    numbers = [10, 20]
    modified_numbers = append_to_copy(numbers, 30)
    print(f"Original numbers after copy func: {numbers}")
    ```

  - **Goal:** Explain the logical errors related to mutability. Modify
  append\_to\_copy to use original\_list\[:] to truly create a copy. Discuss how
  to explicitly copy lists/dictionaries if the original should remain unchanged.


  - **Documentation Assignment:**


  * **Scenario:** This code defines a function that takes a list of numbers and
  returns a new list with each number doubled.


  * **Code to Document:**

    ```
    def double_numbers_in_list(numbers_list):
        """
        Doubles each number in the input list and returns a new list.
        """
        doubled_list = []
        for num in numbers_list:
            doubled_list.append(num * 2)
        return doubled_list

    my_nums = [1, 2, 3]
    doubled_result = double_numbers_in_list(my_nums)
    print(f"Original: {my_nums}, Doubled: {doubled_result}")
    ```

  * **Task:** Ensure the **docstring** for double\_numbers\_in\_list is clear
  about input, output, and side effects. Add **inline comments** explaining the
  loop and appending to the new list.


  * **Goal:** Document a function that processes a list and returns a new list.


  #### **Lesson 6.5: Arbitrary Number of Arguments**


  * **Proofreading Assignment:**


  - **Scenario:** You're using \*args and \*\*kwargs, but misplacing them or
  forgetting the correct number of asterisks.


  - **Code to Proofread:**

    ```
    def sum_all_numbers(*nums):
        total = 0
        for num in nums:
            total += num
        return total

    print(sum_all_numbers(1, 2, 3, 4)) 

    def create_profile(name, **details):
        profile = {"name": name}
        for key, value in details.items():
            profile[key] = value
        return profile

    user_profile = create_profile("Bob", age=30, "city": "London") 

    # Error: forgetting the double asterisk for kwargs
    def log_info(level, msg, args):
        print(f"[{level}] {msg} - {args}")

    log_info("INFO", "User login", user="admin", id=123) 
    ```

  - **Goal:** Fix the SyntaxError by correcting the argument passing for
  create\_profile. Fix the TypeError by adding \*\* to args in log\_info's
  definition.


  - **Documentation Assignment:**


  * **Scenario:** This code defines a function that can accept any number of
  ingredients and print them.


  * **Code to Document:**

    ```
    def make_salad(*ingredients):
        """
        Creates a salad from an arbitrary number of ingredients.
        """
        print("Ingredients for your salad:")
        for ingredient in ingredients:
            print(f"- {ingredient}")

    make_salad("lettuce", "tomato", "cucumber", "dressing")
    make_salad("spinach", "feta")
    ```

  * **Task:** Ensure the **docstring** for make\_salad clearly explains the use
  of \*ingredients. Add an **inline comment** explaining how \*ingredients
  collects arguments.


  * **Goal:** Document a function that uses \*args.

