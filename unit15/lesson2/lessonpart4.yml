# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart4
title: Unit 4
content: >+
  ## Unit 4: Data Structures: Lists and Dictionaries


  ### Lesson 4.1: More on Lists


  * Proofreading Assignment:


  * Scenario: You're trying to modify a list, but you're making mistakes with
  methods or indexing.


  * Code to Proofread:


  ```python

  my_list = [10, 20, 30, 40, 50]


  my_list.add(60) # Incorrect method for adding to end

  print(my_list)


  my_list.insert(1, "hello") # Correct

  print(my_list)


  del my_list[len(my_list)] # IndexError: deleting out of bounds

  print(my_list)


  removed_item = my_list.pop() # Correct

  print(f"Removed: {removed_item}, List: {my_list}")


  my_list.remove(20) # Correct

  print(my_list)


  my_list.remove(99) # ValueError: not in list

  print(my_list)

  ```


  * Goal: Fix the AttributeError and IndexError. Handle the potential ValueError
  with a try-except block, printing a message if the item isn't found.


  * Documentation Assignment:


  * Scenario: This code demonstrates several ways to modify a list.


  * Code to Document:


  ```python

  shopping_list = ["milk", "bread"]

  shopping_list.append("eggs")

  shopping_list.insert(0, "cheese")

  del shopping_list[1]

  print(shopping_list)

  ```


  * Task: Add a docstring explaining the list modifications. Add inline comments
  for append(), insert(), and del to explain what each line does.


  * Goal: Document common list modification methods.


  ### Lesson 4.2: Organizing Lists


  * Proofreading Assignment:


  * Scenario: You're trying to sort and reverse lists, but misusing methods or
  forgetting argument names.


  * Code to Proofread:


  ```python

  names = ["Charlie", "Bob", "Alice"]

  names.sort(True) # TypeError: sort() takes no positional arguments

  print(names)


  numbers = [5, 1, 8, 2]

  sorted_numbers = sorted(numbers) # Correct

  print(sorted_numbers)


  original_numbers = [9, 3, 7]

  original_numbers.reverse # Missing parentheses for method call

  print(original_numbers)


  length_of_list = len[numbers] # TypeError: len() takes a single argument

  print(length_of_list)

  ```


  * Goal: Fix all errors so the list sorting and reversing operations work
  correctly.


  * Documentation Assignment:


  * Scenario: This code sorts a list of scores and prints it in both ascending
  and descending order.


  * Code to Document:


  ```python

  scores = [95, 80, 75, 90]

  scores.sort()

  print("Ascending:", scores)

  scores.sort(reverse=True)

  print("Descending:", scores)

  ```


  * Task: Add a docstring explaining the sorting operations. Add inline comments
  explaining what each sort() call does.


  * Goal: Document in-place list sorting.


  ### Lesson 4.3: Tuples: Immutable Lists


  * Proofreading Assignment:


  * Scenario: You're using tuples, but trying to modify them or using incorrect
  syntax.


  * Code to Proofread:


  ```python

  coordinates = (10, 20, 30] # SyntaxError: mixed parentheses and brackets

  print(coordinates)


  first_coord = coordinates[0]

  print(first_coord)


  coordinates[1] = 25 # TypeError: tuples are immutable

  print(coordinates)


  # Looping through a tuple

  for coord in coordinates:
      print(coord)
  ```


  * Goal: Fix the SyntaxError and explain why the TypeError occurs, then comment
  out the line causing the TypeError.


  * Documentation Assignment:


  * Scenario: This code defines a tuple of weekdays and prints them.


  * Code to Document:


  ```python

  weekdays = ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

  for day in weekdays:
      print(day)
  ```


  * Task: Add a docstring explaining what a tuple is and its purpose in this
  code. Add an inline comment for the for loop explaining its function.


  * Goal: Document tuple creation and iteration.


  ### Lesson 4.4: Introducing Dictionaries


  * Proofreading Assignment:


  * Scenario: You're working with dictionaries, but making mistakes with curly
  braces, keys, or access.


  * Code to Proofread:


  ```python

  person = {"name": "Alice", "age": 25 # Missing closing curly brace

  print(person)


  person["city"] = "New York" # Adding a new key-value pair

  print(person)


  print(person[Name]) # NameError: string literal needed for key


  del person["age"] # Correct

  print(person)


  person["age"] = "twenty-five" # Correct, but perhaps unintended type

  print(person)

  ```


  * Goal: Fix the syntax error and the NameError so dictionary operations are
  correct.


  * Documentation Assignment:


  * Scenario: This code defines a dictionary for a student's profile and prints
  some of its details.


  * Code to Document:


  ```python

  student_profile = {
      "id": 101,
      "name": "Jane Doe",
      "major": "Computer Science",
      "gpa": 3.8
  }

  print(f"Student Name: {student_profile['name']}")

  student_profile["gpa"] = 3.9

  print(f"Updated GPA: {student_profile['gpa']}")

  ```


  * Task: Add a docstring explaining what a dictionary is and its use here. Add
  inline comments explaining how to access data, and how to update a value.


  * Goal: Document dictionary creation, access, and modification.


  ### Lesson 4.5: Looping Through Dictionaries


  * Proofreading Assignment:


  * Scenario: You're trying to loop through dictionary keys, values, or items,
  but common errors are occurring.


  * Code to Proofread:


  ```python

  inventory = {"apple": 10, "banana": 5, "orange": 8}


  for item in inventory: # Loops through keys
      print(item)

  for count in inventory.value(): # Typo in method name
      print(count)

  for k, v in inventory.items # Missing parentheses for method call
      print(f"{k}: {v}")

  # Intentional logical error (no error, just doesn't do what's expected)


  for key in inventory.values():
      print(key) # This will print values, not keys
  ```


  * Goal: Fix the AttributeError and TypeError. Discuss the logical error for
  extra credit.


  * Documentation Assignment:


  * Scenario: This code iterates through a dictionary of product prices.


  * Code to Document:


  ```python

  product_prices = {
      "laptop": 1200,
      "mouse": 25,
      "keyboard": 75
  }

  for product, price in product_prices.items():
      print(f"The {product} costs ${price}.")
  ```


  * Task: Add a docstring for the script. Add inline comments explaining the use
  of .items() and how product and price variables are assigned in the loop.


  * Goal: Document iterating through dictionary items.

showEditor: true
editors:
  - course1/proofreading.py
