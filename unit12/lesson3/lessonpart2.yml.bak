# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart2
title: Lesson
content: >+
  # Lesson: Implementing "Add Item" Functionality:


  * Concept: Connecting GUI input fields to Python variables. Handling button
  clicks.


  * **Task 1: Complete the** **`update_item_display()`** **function.**
    This function is the most important part of your dynamic GUI.

    * Start by clearing the `items_display_column` using `items_display_column.clear()`. This prevents old items from lingering.

    * Use a `for` loop to iterate through the `all_items` list. For each item, create a new `ui.card` within the `items_display_column`.

    * Inside each card, use `ui.label` to display the item's attributes (e.g., `ui.label(f"Name: {item.name}")`).

  * **Task 2: Update the Selection Dropdown.**
    Within the same `update_item_display()` function, you also need to populate the `item_selection_dropdown` in the "Manage Items" tab.

    * Set `item_selection_dropdown.options` to a list of the item's primary identifier (e.g., `[item.name for item in all_items]`). This makes each item selectable by its name.

  * **Task 3: Implement the Edit Form Population.**
    The `edit_selected_item_logic()` function is called when a user selects an item from the dropdown.

    * Use the `selected_item_name` to find the corresponding item in your `all_items` list.

    * Once you've found the item, set the values of the edit form's input fields to the item's current data (e.g., `edit_name_input.value = selected_item.name`).


showEditor: true
editors:
  - course1/unit12/lesson3/lessonpart2/Lesson11_3.py
