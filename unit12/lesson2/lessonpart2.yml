# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart2
title: Lesson
content: >+
  # Lesson: Data Model and Storage:


  * Concept: Designing a Python class to represent a single data item (e.g.,
  Contact, Book). How to store multiple items (list of objects/dictionaries).


  * File I/O Review: Remind students of JSON dump and load for persistent
  storage.

  * **Task 1: Complete the `add_item_logic()` function.**
      This is where you bridge the GUI and your data. The skeleton calls this function when the "Add Item" button is clicked.
      * Inside the function, access the values from the input fields using their `.value` attribute (e.g., `name_input.value`).
      * Implement basic validation. For instance, check if the `name` is an empty string. If it is, use `ui.notify("Name is required!", type='negative')` to provide accessible feedback and stop the function.

  * **Task 2: Create a New Item.**
      If the validation passes, create a new instance of the class you defined in Lesson 1 (e.g., `new_contact = Contact(name_input.value, phone_input.value, ...)`).

  * **Task 3: Integrate and Provide Feedback.**
      * Add your newly created item to the `all_items` global list.
      * Clear the input fields by setting their `.value` to an empty string (e.g., `name_input.value = ""`).
      * Call `update_item_display()` to refresh the view of all items. This function is not yet complete, but you'll need to call it now to set up your workflow.
      * Provide a success notification: `ui.notify("Item added successfully!", type='positive')`.

